This repo contains some thoughts I had about how could we implement
Go-style interfaces to packages in C.  It's a side effect of a LinkedIn
discussion that I started in the Plain Ordinary C group, to discuss my
TEFEL idea - Nigel Evans suggested some form of lightweight OO for C,
on the lines of JavaScript's prototype-based model, and I said "or what
about Go-style interfaces.."  and then started thinking:-)

Go interfaces are vaguely like Java interfaces, or C++ virtual classes,
except that you define them independently of (and often AFTER writing) the
concrete "packages" that happen to implement them.

A Go interface is simply a collection of functions (and their type
signatures), and you can "bind" a package (a module) to an interface,
which either FAILS if the package doesn't contain all the requiired
interface functions, or SUCCEEDS, giving you an interface value which
allows you to ONLY call the interface functions, but of course it invokes
the corresponding package's functions (thus behaving like virtual method
calls, ie dynamic dispatch).

That interface value may be passed around as a parameter, and calls
"through it" can be made later. Note that interfaces don't tackle the
"object data" part of OO, ie. self and attributes, Go handles that
via functions having an optional "receiver" type, often a pointer,
to a structure which stores the instance attributes.  Forget that for
now, let's concentrate on making post-hoc interfaces work.

Last year when I thought about this fresh from reading the "Go Programming
Language" book, I couldn't think of a way in portable C of implementing such
interfaces at all.

I realised that Unix's dynamic linking (aka libdl, dlopen() and dlsym())
could allow us to implement Go-style interfaces. The basic question we
need to get an answer to is "does module M contain a function called M_F?"
if M is dynamically linked, then dlsym() can answer that question.

The way you would do this is:

Write some plain C modules (like pkg[1-3].[ch] in this directory),
each module such as pkg1.[ch] contains a bunch of functions of varying
types. Compile each module (with gcc) with -fPIC, and link them with
-shared (see the Makefile for details) to create .so dynamic libraries.

These .so files can be linked normally into code that uses those modules
directly (such as usepkg[123].c in this directory, again see the Makefile
for the invocations).  Note that you may need to set the environment variable
LD_LIBRARY_PATH to include "." to enable this.

Csh users should do: setenv LD_LIBRARY_PATH ".:$LD_LIBRARY_PATH"
Bash/sh users should do: export LD_LIBRARY_PATH=".:$LD_LIBRARY_PATH"


Then you could construct an interface in hypothetical TEFEL form like:

%interface f12
%func void f1( void );
%func int f2( void );

this describes what functions, with what type signatures (number
of parameters, parameter types, and return type), you'd need to have
exist in your "interface".

Here we need f1 (a void->void func), and f2 (a void->int func), to satisfy
our interface imaginatively called "f12".
Any module which implements f1 amd f2, with matching type signatures, is
"compatible" with interface f12.

You could translate this (by hand) to a plain C module:

f12.h:

// vvf: a pointer to a void->void function
typedef void (*vvf)( void );

// ivf: a pointer to a void->int function, mnemonic; "int-returning void func"
typedef int (*ivf)( void );

// This represents "interface f12": a SLOT for each function..
typedef struct
{
	vvf   f1;
	ivf   f2;
} *f12;

// the bind function
// f12 x = f12_bind( char *modulename, char *errmsg );
//	locate "lib<modulename>.so", and attempt to locate the
//	required symbols f1 and f2 (or modulename_f1 and modulename_f2...),
//	to "bind" lib<modulename>.so to the f12 interface.
//	If we fail: strcpy an error message into errmsg and return NULL
//	If we succeed: return an newly malloc()d f12 object
//	with the function pointers bound to the corresponding
//	functions in lib<modulename>.so
extern f12 f12_bind( char * modulename, char * errmsg );

To implement the f12_bind() function, binding a dynamically linked
module called M's libM.so to interface "f12" could be done by roughly
the following pseudo-code:

void *dl = dlopen( "libM.so" );
return null if dl is null

r = malloc(sizeof(*r))
return null if r is null

vvf f1 = dlsym( dl, "M_f1" );
return null if f1 == null
r->f1 = f1

ivf f2 = dlsym( dl, "M_f2");
return null if f2 == null
r->f2 = f2

return r

see f12.c for the full C implementation of this, wrapped up as an "f12_bind()"
function that takes a module name and a string pointer to a block of space big
enough to store any reasonable error message, and returns NULL if the bind
fails (storing an error message into the string pointer), or, if the bind
succeeds, returns an f12 malloc()d struct pointer, with all the function
pointer slots initialized to point to the corresponding named functions in the
dynamically linked object file.

Client code (such as usef12pkg1.c) can attempt to bind the module "pkg1" to
the interface "f12", check it works, and then invoke the bound functions, via:

	char errmsg[1024];
	f12 pkg1 = f12_bind( "pkg1", errmsg );
	if( pkg1 == NULL )		// bind failed
	{
		printf( "%s\n", errmsg );
	} else				// bind succeeded
	{
		pkg1->f1();
		int n = pkg1->f2();
		printf( "pkg1->f2 returned %d\n", n );
	}

Note that as an extra convenience, for each function F in module M,
f12.c looks for symbols F and M_F (in that order), binding whichever
one it finds first.

Now, what has this to do with TEFEL? The core point of TEFEL is that
FIRST you think up an idea, SECOND you work out how to manually translate
hypothetical new TEFEL directives into plain C, and THIRD you build a
TEFEL processor.

Without the SECOND part, having a solid implementation strategy worked
out, there is absolutely no point in proceeding onto part THREE. So
although I haven't built a "C+Go interfaces to C translator" tool using
my TEFEL concept, I'm pretty sure that I can.

Of course the implementation technique (libdl) is currently platform
dependent, which is not ideal. If anyone can think of a way of making this
more portable, please tell me?

			Duncan White, July 2018
